@mixin mq($size) {
  @media screen and (min-width: $size) {
    @content;
  }
}

@mixin flex($direction: row, $ai: flex-start, $jc: space-between) {
  display: flex;
  flex-direction: $direction;
  align-items: $ai;
  justify-content: $jc;
}

@mixin flexCenter($direction: row) {
  @include flex($direction, center, center);
}

@mixin flexColumn($ai: center, $jc: flex-start) {
  @include flex(column, $ai, $jc);
}

@mixin absolute($top: 0, $left: 0) {
  position: absolute;
  top: $top;
  left: $left;
}

@mixin absoluteCenter {
  @include absolute(50%, 50%);
  transform: translate(-50%, -50%);
}

// theme-aware - Change color of a css property based on currently active theme

@mixin theme-aware($key, $color) {
  @each $theme-name, $theme-color in $themes {
    :global(.theme-#{$theme-name}) & {
      #{$key}: map-get(map-get($themes, $theme-name), $color);
    }
  }
}

// @mixin themify-1($themes: $themes, $type: local) {
//   @each $theme, $map in $themes {
//     @if $type == global {
//       .theme-#{$theme} & {
//         $theme-map: () !global;
//         @each $key, $submap in $map {
//           $value: map-get(map-get($themes, $theme), "#{$key}");
//           $theme-map: map-merge(
//             $theme-map,
//             (
//               $key: $value,
//             )
//           ) !global;
//         }
//       }

//     }

//     @else {
//       :global(.theme-#{$theme}) & {
//       $theme-map: () !global;
//       @each $key, $submap in $map {
//         $value: map-get(map-get($themes, $theme), "#{$key}");
//         $theme-map: map-merge(
//           $theme-map,
//           (
//             $key: $value,
//           )
//         ) !global;
//       }
//     }
//   }
//   @content;
//       $theme-map: null !global;
// }

// @mixin themify($themes: $themes, $type: local) {
//   @if $type == global {
//     @each $theme, $map in $themes {
//       .theme-#{$theme} & {
//         $theme-map: () !global;
//         @each $key, $submap in $map {
//           $value: map-get(map-get($themes, $theme), "#{$key}");
//           $theme-map: map-merge(
//             $theme-map,
//             (
//               $key: $value,
//             )
//           ) !global;
//         }

//         @content;
//         $theme-map: null !global;
//       }
//     }
//   } @else {
//     @each $theme, $map in $themes {
//       :global(.theme-#{$theme}) & {
//         $theme-map: () !global;
//         @each $key, $submap in $map {
//           $value: map-get(map-get($themes, $theme), "#{$key}");
//           $theme-map: map-merge(
//             $theme-map,
//             (
//               $key: $value,
//             )
//           ) !global;
//         }
//       }
//     }
//   }

//   @content;
//   $theme-map: null !global;
// }

@mixin themify-local($themes: $themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

@mixin themify($themes: $themes) {
  @each $theme, $map in $themes {
    :global(.theme-#{$theme}) & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}
